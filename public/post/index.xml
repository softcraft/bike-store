<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on BikeState</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on BikeState</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jun 2013 11:27:27 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Nitro: A quick and simple profiler for Go</title>
      <link>http://localhost:1313/post/nitro/</link>
      <pubDate>Fri, 21 Jun 2013 11:27:27 -0400</pubDate>
      
      <guid>http://localhost:1313/post/nitro/</guid>
      <description>

&lt;h1 id=&#34;nitro:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Nitro&lt;/h1&gt;

&lt;p&gt;Quick and easy performance analyzer library for &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;overview:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Nitro is a quick and easy performance analyzer library for Go.
It is useful for comparing A/B against different drafts of functions
or different functions.&lt;/p&gt;

&lt;h2 id=&#34;implementing-nitro:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Implementing Nitro&lt;/h2&gt;

&lt;p&gt;Using Nitro is simple. First, use &lt;code&gt;go get&lt;/code&gt; to install the latest version
of the library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/spf13/nitro
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, include nitro in your application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/another-post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/another-post/</guid>
      <description>&lt;p&gt;+++ title = &amp;ldquo;Another Hugo Post&amp;rdquo; description = &amp;ldquo;Nothing special, but one post is boring.&amp;rdquo; date = &amp;ldquo;2014-09-02&amp;rdquo; categories = [ &amp;ldquo;example&amp;rdquo;, &amp;ldquo;configuration&amp;rdquo; ] tags = [ &amp;ldquo;example&amp;rdquo;, &amp;ldquo;hugo&amp;rdquo;, &amp;ldquo;toml&amp;rdquo; ] +++&lt;/p&gt;

&lt;p&gt;TOML, YAML, JSON &amp;mdash; Oh my!&lt;/p&gt;

&lt;p&gt;One of the nifty Hugo features we should cover: flexible configuration and front matter formats! This entry has front matter in toml, unlike the last one which used yaml, and json is also available if that&amp;rsquo;s your preference.&lt;/p&gt;

&lt;p&gt;The toml front matter used on this entry:&lt;/p&gt;

&lt;p&gt;+++
title = &amp;ldquo;Another Hugo Post&amp;rdquo;
description = &amp;ldquo;Nothing special, but one post is boring.&amp;rdquo;
date = &amp;ldquo;2014-09-02&amp;rdquo;
categories = [ &amp;ldquo;example&amp;rdquo;, &amp;ldquo;configuration&amp;rdquo; ]
tags = [
    &amp;ldquo;example&amp;rdquo;,
    &amp;ldquo;hugo&amp;rdquo;,
    &amp;ldquo;toml&amp;rdquo;
]
+++
This flexibility also extends to your site&amp;rsquo;s global configuration file. You&amp;rsquo;re free to use any format you prefer::simply name the file config.yaml, config.toml or config.json, and go on your merry way.&lt;/p&gt;

&lt;p&gt;JSON Example&lt;/p&gt;

&lt;p&gt;How would this entry&amp;rsquo;s front matter look in json? That&amp;rsquo;s easy enough to demonstrate:&lt;/p&gt;

&lt;p&gt;{
    &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Another Hugo Post&amp;rdquo;,
    &amp;ldquo;description&amp;rdquo;: &amp;ldquo;Nothing special, but one post is boring.&amp;rdquo;,
    &amp;ldquo;date&amp;rdquo;: &amp;ldquo;2014-09-02&amp;rdquo;,
    &amp;ldquo;categories&amp;rdquo;: [ &amp;ldquo;example&amp;rdquo;, &amp;ldquo;configuration&amp;rdquo; ],
    &amp;ldquo;tags&amp;rdquo;: [
        &amp;ldquo;example&amp;rdquo;,
        &amp;ldquo;hugo&amp;rdquo;,
        &amp;ldquo;toml&amp;rdquo;
    ],
}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/hello-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/hello-hugo/</guid>
      <description>

&lt;p&gt;Hello from Hugo! If you&amp;rsquo;re reading this in your browser, good job! The file content/post/hello-hugo.md has been converted into a complete HTML document by Hugo. Isn&amp;rsquo;t that pretty nifty?&lt;/p&gt;

&lt;p&gt;A Section&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple titled section where you can place whatever information you want.&lt;/p&gt;

&lt;p&gt;You can use inline HTML if you want, but really there&amp;rsquo;s not much that Markdown can&amp;rsquo;t do.&lt;/p&gt;

&lt;p&gt;Showing off with Markdown&lt;/p&gt;

&lt;p&gt;A full cheat sheet can be found here or through Google.&lt;/p&gt;

&lt;p&gt;There are some easy examples for styling, though. I can&amp;rsquo;t emphasize that enough. Creating links or inline code blocks are very straightforward.&lt;/p&gt;

&lt;p&gt;There are some &lt;em&gt;easy&lt;/em&gt; examples for styling, though. I can&amp;rsquo;t &lt;strong&gt;emphasize&lt;/strong&gt; that enough.
Creating &lt;a href=&#34;https://google.com/&#34;&gt;links&lt;/a&gt; or &lt;code&gt;inline code&lt;/code&gt; blocks are very straightforward.
Front Matter for Fun&lt;/p&gt;

&lt;p&gt;This is the meta data for this post. It is located at the top of the content/post/hello-hugo.md markdown file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;title: &amp;ldquo;Hello Hugo!&amp;rdquo;
description: &amp;ldquo;Saying &amp;lsquo;Hello&amp;rsquo; from Hugo&amp;rdquo;
date: &amp;ldquo;2014-09-01&amp;rdquo;
categories:
  - &amp;ldquo;example&amp;rdquo;
  - &amp;ldquo;hello&amp;rdquo;
tags:
  - &amp;ldquo;example&amp;rdquo;
  - &amp;ldquo;hugo&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;blog:559804b0a39dd16d2d1d1238c597145a&#34;&gt;- &amp;ldquo;blog&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;This section, called &amp;lsquo;Front Matter&amp;rsquo;, is what tells Hugo about the content in this file: the title of the item, the description, and the date it was posted. In our example, we&amp;rsquo;ve added two custom bits of data too. The categories and tags sections are used in this example for indexing/grouping content. You will learn more about what that means by examining the code in this example and through reading the Hugo documentation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>